import RPi.GPIO as GPIO
import time

# Define dict of our notes based on frequency we need to swap high/low on driver pins
tones = {
    "B0": 0.03225806451612903,
    "C1": 0.030303030303030304,
    "CS1": 0.02857142857142857,
    "D1": 0.02702702702702703,
    "DS1": 0.02564102564102564,
    "E1": 0.024390243902439025,
    "F1": 0.022727272727272728,
    "FS1": 0.021739130434782608,
    "G1": 0.02040816326530612,
    "GS1": 0.019230769230769232,
    "A1": 0.01818181818181818,
    "AS1": 0.017241379310344827,
    "B1": 0.016129032258064516,
    "C2": 0.015384615384615385,
    "CS2": 0.014492753623188406,
    "D2": 0.0136986301369863,
    "DS2": 0.01282051282051282,
    "E2": 0.012195121951219513,
    "F2": 0.011494252873563218,
    "FS2": 0.010752688172043012,
    "G2": 0.01020408163265306,
    "GS2": 0.009615384615384616,
    "A2": 0.00909090909090909,
    "AS2": 0.008547008547008548,
    "B2": 0.008130081300813009,
    "C3": 0.007633587786259542,
    "CS3": 0.007194244604316547,
    "D3": 0.006802721088435374,
    "DS3": 0.00641025641025641,
    "E3": 0.006060606060606061,
    "F3": 0.005714285714285714,
    "FS3": 0.005405405405405406,
    "G3": 0.00510204081632653,
    "GS3": 0.004807692307692308,
    "A3": 0.004545454545454545,
    "AS3": 0.004291845493562232,
    "B3": 0.004048582995951417,
    "C4": 0.003816793893129771,
    "CS4": 0.0036101083032490976,
    "D4": 0.003401360544217687,
    "DS4": 0.003215434083601286,
    "E4": 0.0030303030303030303,
    "F4": 0.0028653295128939827,
    "FS4": 0.002702702702702703,
    "G4": 0.002551020408163265,
    "GS4": 0.0024096385542168677,
    "A4": 0.0022727272727272726,
    "AS4": 0.002145922746781116,
    "B4": 0.0020242914979757085,
    "C5": 0.0019120458891013384,
    "CS5": 0.0018050541516245488,
    "D5": 0.0017035775127768314,
    "DS5": 0.001607717041800643,
    "E5": 0.0015174506828528073,
    "F5": 0.0014326647564469914,
    "FS5": 0.0013513513513513514,
    "G5": 0.0012755102040816326,
    "GS5": 0.0012033694344163659,
    "A5": 0.0011363636363636363,
    "AS5": 0.001072961373390558,
    "B5": 0.0010121457489878543,
    "C6": 0.0009551098376313276,
    "CS6": 0.0009017132551848512,
    "D6": 0.000851063829787234,
    "DS6": 0.0008032128514056225,
    "E6": 0.000758150113722517,
    "F6": 0.0007158196134574087,
    "FS6": 0.0006756756756756757,
    "G6": 0.0006377551020408163,
    "GS6": 0.0006020469596628537,
    "A6": 0.0005681818181818182,
    "AS6": 0.0005361930294906167,
    "B6": 0.0005060728744939271,
    "C7": 0.00047778308647873863,
    "CS7": 0.0004510599909788002,
    "D7": 0.0004257130693912303,
    "DS7": 0.0004017677782241864,
    "E7": 0.0003792188092529389,
    "F7": 0.00035790980672870435,
    "FS7": 0.00033783783783783786,
    "G7": 0.00031887755102040814,
    "GS7": 0.00030102347983142685,
    "A7": 0.0002840909090909091,
    "AS7": 0.0002681684097613301,
    "B7": 0.0002531004808909137,
    "C8": 0.00023889154323936931,
    "CS8": 0.00022547914317925591,
    "D8": 0.00021281123643328368,
    "DS8": 0.0002008838891120932,
}

# Create our library of sounds
sounds = {
    "slide": [
        ("A5", 0.01),
        ("B5", 0.01),
        ("CS5", 0.01),
        ("DS5", 0.01),
        ("F5", 0.01),
        ("G5", 0.01),
        ("A5", 0.01),
        ("B5", 0.01),
        ("CS6", 0.01),
        ("DS6", 0.01),
        ("F6", 0.01),
        ("G6", 0.01),
        ("A6", 0.01),
        ("B6", 0.01),
        ("CS7", 0.01),
        ("DS7", 0.01),
        ("F7", 0.01),
        ("G7", 0.01),
        ("A7", 0.01),
        ("B7", 0.01),
        ("CS8", 0.01),
        ("DS8", 0.01),
        ("F8", 0.01),
        ("G8", 0.01),
        ("A8", 0.01),
        ("B8", 0.01),
        ("CS9", 0.01),
    ],

    "notify": [
        ("A4", 0.01),
        ("D4", 0.01),
        ("G5", 0.01),
    ],

    "compliant": [
        ("DS8", 0.005),
    ],

    "noncompliant": [
        ("C2", 0.1),
    ],

    "warning": [
        ("A4", 0.25),
        ("A4", 0.25),
    ],
}

# Set pins used to interface with the buzzer
outputPinA = 33
outputPinB = 40

def setup():
    # Initialize GPIO pins
    GPIO.setmode(GPIO.BOARD)
    GPIO.setup(outputPinA, GPIO.OUT)
    GPIO.output(outputPinA, GPIO.LOW)
    GPIO.setup(outputPinB, GPIO.OUT)
    GPIO.output(outputPinB, GPIO.LOW)

def playTone(delay, duration):
    duration = duration / delay             # This doesn't work right but it works well enough
    for i in range(1, round(duration)):
        GPIO.output(outputPinA, GPIO.HIGH)  # Toggle the pins
        time.sleep(delay)                   # to create a differential
        GPIO.output(outputPinA, GPIO.LOW)   # drive effect, which
        time.sleep(delay)                   # is twice as loud as a 
        GPIO.output(outputPinB, GPIO.HIGH)  # normal square wave
        time.sleep(delay)
        GPIO.output(outputPinB, GPIO.LOW)
        time.sleep(delay)

def playSound(song):
    for i in range(len(song)):
        if (song[i][0] == "R"):                         # If we're on a rest
            time.sleep(song[i][1])                      # Rest for the time specified
        else:
            playTone(tones[song[i][0]], song[i][1])     # Otherwise, play our note
        time.sleep(0.05)                                # Pause for 50ms to avoid smearing or skipping notes
    
    GPIO.cleanup()                                      # Clean up the GPIO pins